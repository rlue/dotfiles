#!/bin/bash

# acquire sudo privileges
sudo whoami >/dev/null 2>&1 || exit 1

# INIT =========================================================================
sandbox="$(mktemp -d)"
tmpfile="$(mktemp)"

# accepts two arguments:
# * a github repo (e.g., "sharkdp/fd") and returns the latest version tag
# * (optional) a version string regex
function latest_version() {
  cd "$sandbox" >/dev/null || exit
  git init >/dev/null
  git remote remove origin >/dev/null 2>&1
  git remote add origin "https://github.com/$1" >/dev/null
  git ls-remote --tags 2>/dev/null | \grep -oP ${2:-'(?<=/)v?[0-9.]+$'} | sed 's/^v//' | sort -rV | head -n1
}

# via https://stackoverflow.com/a/24067243/4865822
function version_gt() {
  test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"
}

truncate -s 0 "/tmp/inapt-upgrade.log"
exec 3<>"/tmp/inapt-upgrade.log"

function finish {
  terminal_width=${COLUMNS:-$(tput cols)}
  filler_width=$((terminal_width - 8))
  adjusted_width=$((filler_width < 72 ? filler_width : 72))

  printf '\nCLEANUP '
  printf '%*s\n' "$adjusted_width" '' | tr ' ' =
  echo "Closing file descriptor 3..."
  exec 3>&-

  echo "Removing tmpfiles..."
  cd / && rm -rf "$sandbox" "$tmpfile"

  echo "See /tmp/inapt-upgrade.log for details"
}

trap finish EXIT

# neovim -----------------------------------------------------------------------
# if [ $# -eq 0 ] || [ "$1" == nvim ] && command -v nvim >/dev/null 2>&1; then
#   printf "Checking neovim..."
#
#   nvim_stable=$(latest_version "neovim/neovim")
#   nvim_installed=$(nvim --version | head -n1 | awk '{ print $NF }' | sed 's/^v//')
#   nvim_release="https://github.com/sharkdp/nvim/releases/download/v${nvim_stable}/nvim_${nvim_stable}_amd64.deb"
#
#   if version_gt "$nvim_stable" "$nvim_installed"; then
#     echo -e "\r⬇️ Upgrading neovim..."
#     cd "$sandbox"
#     git clone https://github.com/neovim/neovim >/dev/null 2>&1
#     cd neovim
#     make CMAKE_BUILD_TYPE=Release CMAKE_EXTRA_FLAGS="-DCMAKE_INSTALL_PREFIX=$HOME/.local" >&3 2>&3
#     make install >&3 2>&3
#   else
#     echo -e "\r\e[32m✅ neovim is up-to-date ($nvim_installed » $nvim_stable)\e[0m"
#   fi
# fi

# firefox ----------------------------------------------------------------------
if [ $# -eq 0 ] || [ "$1" == firefox ] && [ -d /opt/firefox ] >/dev/null 2>&1; then
  printf "Checking Firefox..."

  ff_stable=$(curl -sSfL https://product-details.mozilla.org/1.0/firefox_versions.json | grep DEVEDITION | awk '{ print $ NF }' | tr -d \",)
  ff_installed=$(/opt/firefox/firefox --version | awk '{ print $NF }')

  if version_gt "$ff_stable" "$ff_installed"; then
    printf "\r⬇️ Upgrading Firefox Developer Edition..."
    curl -sSfL "https://download.mozilla.org/?product=firefox-devedition-latest-ssl&os=linux64&lang=en-US" | sudo tar xj --directory="/opt" --file=- >&3
    echo -e "\r\e[32m✅ Firefox Developer Edition is up-to-date ($ff_installed » $ff_stable)\e[0m"
  else
    echo -e "\r✅ Firefox Developer Edition is up-to-date ($ff_installed)"
  fi
fi

# rust -------------------------------------------------------------------------
if [ $# -eq 0 ] || [ "$1" == rust ] && command -v rustup >/dev/null 2>&1; then
  printf "Checking rust..."

  rust_stable=$(rustup check | \grep -oP '.* \K[0-9.]+(?= \(.*\))')
  rust_installed=$(rustc --version | awk '{ print $2 }')

  if version_gt "$rust_stable" "$rust_installed"; then
    printf "\r⬇️ Upgrading Rust..."
    rustup update 2>&3
    echo -e "\r\e[32m✅ Rust is up-to-date ($rust_installed » $rust_stable)\e[0m"
  else
    echo -e "\r✅ Rust is up-to-date ($rust_installed)"
  fi
fi

if [ $# -eq 0 ] || [ "$1" == cargo-deb ] && command -v cargo >/dev/null 2>&1; then
  printf "Checking cargo-deb..."

  cargodeb_stable=$(latest_version "mmstick/cargo-deb")
  cargodeb_installed=$(cargo deb --version)

  if version_gt "$cargodeb_stable" "$cargodeb_installed"; then
    printf "\r⬇️ Upgrading cargo-deb..."
    cargo install cargo-deb --force >&3
    echo -e "\r\e[32m✅ cargo-deb is up-to-date ($cargodeb_installed » $cargodeb_stable)\e[0m"
  else
    echo -e "\r✅ cargo-deb is up-to-date ($cargodeb_installed)"
  fi
fi

# pip --------------------------------------------------------------------------
if [ $# -eq 0 ] || [ "$1" == pip ]; then
  for package in pip buku ffsubsync picard speedtest-cli urlscan visidata youtube-dl yt-dlp; do
    printf "Checking python package %s..." "$package"

    if pip --isolated install --upgrade $package 2>&1 | tee -a /proc/self/fd/3 | grep -q "Installing collected packages: $package"; then
      echo -e "\r\e[32m✅ python package $package is up-to-date\e[0m"
    else
      echo -e "\r✅ python package $package is up-to-date"
    fi
  done
fi

# dive -------------------------------------------------------------------------
if [ $# -eq 0 ] || [ "$1" == dive ] && dpkg --status dive >/dev/null 2>&1; then
  printf "Checking dive..."

  dive_stable=$(latest_version "wagoodman/dive")
  dive_installed=$(dive --version | awk '{ print $NF }')
  dive_release="https://github.com/wagoodman/dive/releases/download/v${dive_stable}/dive_${dive_stable}_linux_amd64.deb"

  if version_gt "$dive_stable" "$dive_installed"; then
    printf "\r⬇️ Upgrading dive..."
    curl -sSf -o "$tmpfile" -L "$dive_release" && sudo dpkg --install --skip-same-version "$tmpfile" >&3
    echo -e "\r\e[32m✅ dive is up-to-date ($dive_installed » $dive_stable)\e[0m"
  else
    echo -e "\r✅ dive is up-to-date ($dive_installed)"
  fi
fi

# fd ---------------------------------------------------------------------------
if [ $# -eq 0 ] || [ "$1" == fd ] && dpkg --status fd >/dev/null 2>&1; then
  printf "Checking fd..."

  fd_stable=$(latest_version "sharkdp/fd")
  fd_installed=$(fd --version | awk '{ print $NF }')
  fd_release="https://github.com/sharkdp/fd/releases/download/v${fd_stable}/fd_${fd_stable}_amd64.deb"

  if version_gt "$fd_stable" "$fd_installed"; then
    printf "\r⬇️ Upgrading fd..."
    curl -sSf -o "$tmpfile" -L "$fd_release" && sudo dpkg --install --skip-same-version "$tmpfile" >&3
    echo -e "\r\e[32m✅ fd is up-to-date ($fd_installed » $fd_stable)\e[0m"
  else
    echo -e "\r✅ fd is up-to-date ($fd_installed)"
  fi
fi

# ripgrep ----------------------------------------------------------------------
if [ $# -eq 0 ] || [ "$1" == rg ] && dpkg --status ripgrep >/dev/null 2>&1; then
  printf "Checking ripgrep..."

  rg_stable=$(latest_version "burntsushi/ripgrep")
  rg_installed=$(rg --version | head -n1 | awk '{ print $2 }')
  rg_release="https://github.com/BurntSushi/ripgrep/releases/download/${rg_stable}/ripgrep_${rg_stable}_amd64.deb"

  if version_gt "$rg_stable" "$rg_installed"; then
    printf "\r⬇️ Upgrading ripgrep..."
    curl -sSf -o "$tmpfile" -L "$rg_release" && sudo dpkg --install --skip-same-version "$tmpfile" >&3
    echo -e "\r\e[32m✅ ripgrep is up-to-date ($rg_installed » $rg_stable)\e[0m"
  else
    echo -e "\r✅ rg is up-to-date ($rg_installed)"
  fi
fi

# fzf---------------------------------------------------------------------------
if [ $# -eq 0 ] || [ "$1" == fzf ] && command -v fzf >/dev/null 2>&1; then
  printf "Checking fzf..."

  fzf_stable=$(latest_version "junegunn/fzf")
  fzf_installed=$(fzf --version | awk '{ print $1 }')
  fzf_release="https://github.com/junegunn/fzf/releases/download/${fzf_stable}/fzf-${fzf_stable}-linux_amd64.tar.gz"
  fzf_repo="https://raw.githubusercontent.com/junegunn/fzf/master"

  if version_gt "$fzf_stable" "$fzf_installed"; then
    printf "\r⬇️ Upgrading fzf..."
    curl -sSfL "$fzf_release" | sudo tar -xzf - -C /usr/local/bin/
    sudo curl -sSfL "${fzf_repo}/bin/fzf-tmux" -o /usr/local/bin/fzf-tmux
    sudo chmod +x /usr/local/bin/fzf-tmux

    sudo curl -sSfL "${fzf_repo}/man/man1/fzf.1" -o /usr/local/share/man/man1/fzf.1
    sudo curl -sSfL "${fzf_repo}/man/man1/fzf-tmux.1" -o /usr/local/share/man/man1/fzf-tmux.1
    sudo curl -sSfL "${fzf_repo}/shell/completion.bash" -o /usr/local/share/fzf/completion.bash
    sudo curl -sSfL "${fzf_repo}/shell/key-bindings.bash" -o /usr/local/share/fzf/key-bindings.bash
    command -v fish >/dev/null 2>&1 && curl -sSfL "${fzf_repo}/shell/key-bindings.fish" -o $HOME/.config/fish/functions/fzf_key_bindings.fish

    sudo curl -sSfL "${fzf_repo}/plugin/fzf.vim" -o /usr/local/plugin/fzf.vim
    sudo chown -R root.staff /usr/local
    echo -e "\r\e[32m✅ fzf is up-to-date ($fzf_installed » $fzf_stable)\e[0m"
  else
    echo -e "\r✅ fzf is up-to-date ($fzf_installed)"
  fi
fi

# # prettyping -------------------------------------------------------------------
# if [ $# -eq 0 ] || [ "$1" == prettyping ] && command -v prettyping >/dev/null 2>&1; then
#   printf "Checking prettyping..."
#
#   echo -e "\r⬇️ Upgrading prettyping..."
#   sudo rm /usr/local/bin/prettyping
#   curl -o /usr/local/bin/prettyping https://raw.githubusercontent.com/denilsonsa/prettyping/master/prettyping >&3
#   chmod +x /usr/local/bin/prettyping
#   sudo chown root.staff /usr/local/bin/prettyping
# fi

# # diff-so-fancy ----------------------------------------------------------------
# if [ $# -eq 0 ] || [ "$1" == diff-so-fancy ] && command -v diff-so-fancy >/dev/null 2>&1; then
#   printf "Checking diff-so-fancy..."
#
#   dsf_stable=$(latest_version "so-fancy/diff-so-fancy")
#   dsf_installed=$(diff-so-fancy --version 2>&1 | tail -n1 | awk '{ print $NF }')
#
#   if version_gt "$dsf_stable" "$dsf_installed"; then
#     printf "\r⬇️ Upgrading diff-so-fancy..."
#     sudo rm /usr/local/bin/diff-so-fancy
#     curl -sSfLo /usr/local/bin/diff-so-fancy "https://github.com/so-fancy/diff-so-fancy/releases/download/v${dsf_stable}/diff-so-fancy" >&3
#     chmod +x /usr/local/bin/diff-so-fancy
#     sudo chown root.staff /usr/local/bin/diff-so-fancy
#     echo -e "\r\e[32m✅ diff-so-fancy is up-to-date ($dsf_installed » $dsf_stable)\e[0m"
#   else
#     echo -e "\r✅ diff-so-fancy is up-to-date ($dsf_installed)"
#   fi
# fi

# direnv -----------------------------------------------------------------------
if [ $# -eq 0 ] || [ "$1" == direnv ] && command -v direnv >/dev/null 2>&1; then
  printf "Checking direnv..."
  direnv_stable=$(latest_version "direnv/direnv")
  direnv_installed=$(direnv --version)
  direnv_release="https://github.com/direnv/direnv/releases/download/v${direnv_stable}/direnv.linux-amd64"

  if version_gt "$direnv_stable" "$direnv_installed"; then
    printf "\r⬇️ Upgrading direnv..."
    curl -sSf -L "$direnv_release" -o /usr/local/bin/direnv >&3
    sudo chmod +x /usr/local/bin/direnv
    sudo chown root.staff /usr/local/bin/direnv
    echo -e "\r\e[32m✅ direnv is up-to-date ($direnv_installed » $direnv_stable)\e[0m"
  else
    echo -e "\r✅ direnv is up-to-date ($direnv_installed)"
  fi
fi

# rbspy ------------------------------------------------------------------------
if [ $# -eq 0 ] || [ "$1" == rbspy ] && command -v rbspy >/dev/null 2>&1; then
  printf "Checking rbspy..."

  rbspy_stable=$(latest_version "rbspy/rbspy")
  rbspy_installed=$(rbspy --version | awk '{ print $NF }')
  rbspy_release="https://github.com/rbspy/rbspy/releases/download/v${rbspy_stable}/rbspy-x86_64-unknown-linux-musl.tar.gz"

  if version_gt "$rbspy_stable" "$rbspy_installed"; then
    printf "\r⬇️ Upgrading rbspy..."
    curl -sSf -L "$rbspy_release" | sudo tar xz --directory=/usr/local/bin --file=- >&3
    sudo mv /usr/local/bin/rbspy-x86_64-unknown-linux-musl /usr/local/bin/rbspy
    sudo chmod +x /usr/local/bin/rbspy
    sudo chown root.staff /usr/local/bin/rbspy
    echo -e "\r\e[32m✅ rbspy is up-to-date ($rbspy_installed » $rbspy_stable)\e[0m"
  else
    echo -e "\r✅ rbspy is up-to-date ($rbspy_installed)"
  fi
fi

# # forego -----------------------------------------------------------------------
# if [ $# -eq 0 ] || [ "$1" == forego ] ; then
#   printf "Checking forego..."
#
#   eval "$("$HOME/.goenv/bin/goenv" init -)"
#   source "$HOME/.config/.bashrc.d/30-util-init.goenv.bash"
#   echo -e "\r⬇️ Upgrading forego..."
#   go install github.com/ddollar/forego
# fi

# geckodriver ------------------------------------------------------------------
if [ $# -eq 0 ] || [ "$1" == geckodriver ] && command -v geckodriver >/dev/null 2>&1; then
  printf "Checking geckodriver..."

  geckodriver_stable=$(latest_version "mozilla/geckodriver")
  geckodriver_installed=$(geckodriver --version | sed -nr 's/.*([[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+).*/\1/p')
  geckodriver_release="https://github.com/mozilla/geckodriver/releases/download/v${geckodriver_stable}/geckodriver-v${geckodriver_stable}-linux64.tar.gz"

  if version_gt "$geckodriver_stable" "$geckodriver_installed"; then
    printf "\r⬇️ Upgrading geckodriver..."
    sudo rm /usr/local/bin/geckodriver
    curl -sSf -L "$geckodriver_release" | sudo tar xz --directory=/usr/local/bin --file=- >&4
    sudo chmod +x /usr/local/bin/geckodriver
    sudo chown root.staff /usr/local/bin/geckodriver
    echo -e "\r\e[32m✅ geckodriver is up-to-date ($geckodriver_installed » $geckodriver_stable)\e[0m"
  else
    echo -e "\r✅ geckodriver is up-to-date ($geckodriver_installed)"
  fi
fi

# docker-credential-pass -------------------------------------------------------
if [ $# -eq 0 ] || [ "$1" == docker-credential-pass ] && command -v docker-credential-pass >/dev/null 2>&1; then
  printf "Checking docker-credential-pass..."

  dcp_stable=$(latest_version "docker/docker-credential-helpers")
  dcp_installed=$(docker-credential-pass version | cut -d\  -f3 | tr -d v)
  dcp_release="https://github.com/docker/docker-credential-helpers/releases/download/v${dcp_stable}/docker-credential-pass-v${dcp_stable}.linux-amd64"

  if version_gt "$dcp_stable" "$dcp_installed"; then
    printf "\r⬇️ Upgrading docker-credential-pass..."
    sudo rm /usr/local/bin/docker-credential-pass
    sudo curl -sSf -L "$dcp_release" -o /usr/local/bin/docker-credential-pass
    sudo chmod +x /usr/local/bin/docker-credential-pass
    sudo chown root.staff /usr/local/bin/docker-credential-pass
    echo -e "\r\e[32m✅ docker-credential-pass is up-to-date ($dcp_installed » $dcp_stable)\e[0m"
  else
    echo -e "\r✅ docker-credential-pass is up-to-date ($dcp_installed)"
  fi
fi

# alacritty --------------------------------------------------------------------
if [ $# -eq 0 ] || [ "$1" == alacritty ] && dpkg --status alacritty >/dev/null 2>&1; then
  printf "Checking alacritty..."

  alacritty_stable=$(latest_version "jwilm/alacritty")
  alacritty_installed=$(alacritty --version | awk '{ print $2 }')

  if version_gt "$alacritty_stable" "$alacritty_installed"; then
    printf "\r⬇️ Upgrading alacritty..."

    chmod 777 "$sandbox"

    git clone https://github.com/jwilm/alacritty "$sandbox/alacritty" 2>&3
    cd "$sandbox/alacritty" || exit
    git checkout "v${alacritty_stable}"
    cargo deb --install --manifest-path "$sandbox/alacritty/alacritty/Cargo.toml" >&3

    # per https://github.com/alacritty/alacritty/blob/master/INSTALL.md
    sudo tic -xe alacritty,alacritty-direct extra/alacritty.info
    sudo cp extra/logo/alacritty-term.svg /usr/share/pixmaps/Alacritty.svg
    sudo desktop-file-install extra/linux/Alacritty.desktop
    sudo update-desktop-database
    gzip -c extra/alacritty.man | sudo tee /usr/local/share/man/man1/alacritty.1.gz >/dev/null
    gzip -c extra/alacritty-msg.man | sudo tee /usr/local/share/man/man1/alacritty-msg.1.gz >/dev/null
    cp extra/completions/alacritty.bash $HOME/.local/share/bash-completion/completions

    echo -e "\r\e[32m✅ alacritty is up-to-date ($alacritty_installed » $alacritty_stable)\e[0m"
  else
    echo -e "\r✅ alacritty is up-to-date ($alacritty_installed)"
  fi
fi

# timer ------------------------------------------------------------------------
if [ $# -eq 0 ] || [ "$1" == timer ] && command -v timer >/dev/null 2>&1; then
  printf "Checking timer..."

  timer_stable=$(latest_version "rlue/timer")
  timer_installed=$(timer --version | awk '{ print $2 }')

  if version_gt "$timer_stable" "$timer_installed"; then
    printf "\r⬇️ Upgrading timer..."
    sudo curl -sSL -o /usr/local/bin/timer https://raw.githubusercontent.com/rlue/timer/master/bin/timer >&3
    sudo chown root.staff /usr/local/bin/timer
    sudo chmod +x /usr/local/bin/timer
    echo -e "\r\e[32m✅ timer is up-to-date ($timer_installed » $timer_stable)\e[0m"
  else
    echo -e "\r✅ timer is up-to-date ($timer_installed)"
  fi
fi

# ruby -------------------------------------------------------------------------
if [ $# -eq 0 ] || [ "$1" == rbenv ] && [ -d "$HOME/.rbenv/.git" ]; then
  printf "Checking rbenv..."

  cd "$HOME/.rbenv" || exit
  if git pull 2>/dev/null | tee -a "/tmp/inapt-upgrade.log" | grep -q "^Updating"; then
    cp completions/rbenv.bash $HOME/.local/share/bash-completion/completions/
    echo -e "\r\e[32m✅ rbenv is up-to-date ($(git rev-parse --short HEAD))\e[0m"
  else
    echo -e "\r✅ rbenv is up-to-date ($(git rev-parse --short HEAD))"
  fi

  for dir in "$HOME/.rbenv" "$HOME"/.rbenv/plugins/*; do
    cd "$dir" || exit
    printf "Checking %s..." "$(basename "$dir")..."

    if git pull 2>/dev/null | tee -a "/tmp/inapt-upgrade.log" | grep -q "^Updating"; then
      echo -e "\r\e[32m✅ $(basename "$dir") is up-to-date ($(git rev-parse --short HEAD))\e[0m"
    else
      echo -e "\r✅ $(basename "$dir") is up-to-date ($(git rev-parse --short HEAD))"
    fi
  done

  cd "$HOME/.rbenv" || exit

  printf "Checking ruby..."
  ruby_stable="$("$HOME/.rbenv/bin/rbenv" install --list 2>/dev/null | \grep '^[0-9]' | tail -n1)"
  ruby_installed=$("$HOME/.rbenv/bin/rbenv" versions --bare | tail -n1)

  if version_gt "$ruby_stable" "$ruby_installed"; then
    printf "\r⬇️ Upgrading ruby..."
    RUBY_CONFIGURE_OPTS=--with-jemalloc rbenv install --skip-existing $ruby_stable >&3
    echo -e "\r\e[32m✅ ruby is up-to-date ($ruby_installed » $ruby_stable)\e[0m"
  else
    echo -e "\r✅ ruby is up-to-date ($ruby_installed)"
  fi
fi

# pyenv ------------------------------------------------------------------------
if [ $# -eq 0 ] || [ "$1" == pyenv ] && [ -d "$HOME/.pyenv/.git" ]; then
  printf "Checking pyenv..."

  cd "$HOME/.pyenv" || exit
  if git pull 2>/dev/null | tee -a "/tmp/inapt-upgrade.log" | grep -q "^Updating"; then
    cp --force completions/pyenv.bash $HOME/.local/share/bash-completion/completions/
    echo -e "\r\e[32m✅ pyenv is up-to-date ($(git rev-parse --short HEAD))\e[0m"
  else
    echo -e "\r✅ pyenv is up-to-date ($(git rev-parse --short HEAD))"
  fi

  printf "Checking python..."
  python_stable="$("$HOME/.pyenv/bin/pyenv" install --list | grep '^[ 0-9.]\+$' | tail -n1 | tr -d ' ')"
  python_installed=$("$HOME/.pyenv/bin/pyenv" versions --bare | tail -n1)

  if version_gt "$python_stable" "$python_installed"; then
    printf "\r⬇️ Upgrading python..."
    "$HOME/.pyenv/bin/pyenv" install --skip-existing $python_stable >&3
    echo -e "\r\e[32m✅ python is up-to-date ($python_installed » $python_stable)\e[0m"
  else
    echo -e "\r✅ python is up-to-date ($python_installed)"
  fi
fi

# nodenv -----------------------------------------------------------------------
if [ $# -eq 0 ] || [ "$1" == nodenv ] && [ -d "$HOME/.nodenv/.git" ]; then
  printf "Checking nodenv..."

  cd "$HOME/.nodenv" || exit
  if git pull | tee -a "/tmp/inapt-upgrade.log" | grep -q "^Updating"; then
    cp completions/nodenv.bash $HOME/.local/share/bash-completion/completions/
    echo -e "\r\e[32m✅ nodenv is up-to-date ($(git rev-parse --short HEAD))\e[0m"
  else
    echo -e "\r✅ nodenv is up-to-date ($(git rev-parse --short HEAD))"
  fi

  for dir in "$HOME"/.nodenv/plugins/*; do
    cd "$dir" || exit
    printf "Checking %s..." "$(basename "$dir")..."

    if git pull 2>/dev/null | tee -a "/tmp/inapt-upgrade.log" | grep -q "^Updating"; then
      echo -e "\r\e[32m✅ $(basename "$dir") is up-to-date ($(git rev-parse --short HEAD))\e[0m"
    else
      echo -e "\r✅ $(basename "$dir") is up-to-date ($(git rev-parse --short HEAD))"
    fi
  done

  printf "Checking node..."
  node_stable="$("$HOME/.nodenv/bin/nodenv" install --list | grep '^[ 0-9.]\+$' | tail -n1)"
  node_installed=$("$HOME/.nodenv/bin/nodenv" versions --bare | tail -n1)

  if version_gt "$node_stable" "$node_installed"; then
    printf "\r⬇️ Upgrading node..."
    "$HOME/.nodenv/bin/nodenv" install --skip-existing $node_stable >&3
    echo -e "\r\e[32m✅ node is up-to-date ($node_installed » $node_stable)\e[0m"
  else
    echo -e "\r✅ node is up-to-date ($node_installed)"
  fi
fi

# goenv ------------------------------------------------------------------------
if [ $# -eq 0 ] || [ "$1" == goenv ] && [ -d "$HOME/.goenv/.git" ]; then
  printf "Checking goenv..."

  cd "$HOME/.goenv" || exit
  if git pull | tee -a "/tmp/inapt-upgrade.log" | grep -q "^Updating"; then
    cp completions/goenv.bash $HOME/.local/share/bash-completion/completions/
    echo -e "\r\e[32m✅ goenv is up-to-date ($(git rev-parse --short HEAD))\e[0m"
  else
    echo -e "\r✅ goenv is up-to-date ($(git rev-parse --short HEAD))"
  fi

  printf "Checking go..."
  go_stable="$("$HOME/.goenv/bin/goenv" install --list | grep '^[ 0-9.]\+$' | tail -n1 | tr -d ' ')"
  go_installed=$("$HOME/.goenv/bin/goenv" versions --bare | tail -n1)

  if version_gt "$go_stable" "$go_installed"; then
    printf "\r⬇️ Upgrading go..."
    "$HOME/.goenv/bin/goenv" install --skip-existing $go_stable >&3
    echo -e "\r\e[32m✅ go is up-to-date ($go_installed » $go_stable)\e[0m"
  else
    echo -e "\r✅ go is up-to-date ($go_installed)"
  fi
fi

# i3-gaps ----------------------------------------------------------------------
if [ $# -eq 0 ] || [ "$1" == i3 ] && command -v i3 >/dev/null 2>&1 && ! i3 --version | grep gaps >/dev/null 2>&1; then
  printf "Checking i3-gaps..."

  i3g_stable=$(latest_version "Airblader/i3")
  i3g_installed=$(i3 --version | awk '{ print $3 }')

  if version_gt "$i3g_stable" "$i3g_installed"; then
    printf "\r⬇️ Upgrading i3-gaps..."
    git clone https://github.com/maestrogerardo/i3-gaps-deb "$sandbox/i3-gaps-deb" >&3
    cd "$sandbox/i3-gaps-deb" || exit
    sed -i 's/"gaps"/"gaps-next"/' i3-gaps-deb # hacky workaround to use latest version in unattended install
    yes | sudo ./i3-gaps-deb >&3
    echo -e "\r\e[32m✅ i3-gaps is up-to-date ($i3g_installed » $i3g_stable)\e[0m"
  else
    echo -e "\r✅ i3-gaps is up-to-date ($i3g_installed)"
  fi
fi

# i3lock-color -----------------------------------------------------------------
if [ $# -eq 0 ] || [ "$1" == i3lock ] && i3lock --version 2>&1 | grep '\.c' - >/dev/null; then
  printf "Checking i3lock-color..."

  cd "$sandbox" >/dev/null || exit
  i3lc_stable=$(latest_version "Raymo111/i3lock-color" '(?<=/)v?[0-9.]+$')
  i3lc_installed=$(i3lock --version 2>&1 | awk '{ print $3 }')

  if version_gt "$i3lc_stable" "$i3lc_installed"; then
    printf "\r⬇️ Upgrading i3lock-color..."
    git clone https://github.com/Raymo111/i3lock-color "$sandbox/i3lock-color" >&3 2>&3
    cd "$sandbox/i3lock-color"
    ./build.sh
    cd build
    sed --in-place 's/^\(prefix = \/usr\)/\1\/local/' Makefile
    make
    sudo make install
    echo -e "\r\e[32m✅ i3lock-color is up-to-date ($i3lc_installed » $i3lc_stable)\e[0m"
  else
    echo -e "\r✅ i3lock-color is up-to-date ($i3lc_installed)"
  fi
fi

# TODO: Switch to qt6 when it doesn't break the heatmap plugin?
# anki -------------------------------------------------------------------------
if [ $# -eq 0 ] || [ "$1" == anki ] && command -v anki >/dev/null 2>&1; then
  printf "Checking anki..."

  anki_stable=$(latest_version "dae/anki")
  anki_release="https://github.com/ankitects/anki/releases/download/${anki_stable}/anki-${anki_stable}-linux-qt5.tar.zst"
  anki_installed=$(anki --help | sed -nr 's/Anki ([[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+).*/\1/p')

  if version_gt "$anki_stable" "$anki_installed"; then
    printf "\r⬇️ Upgrading anki..."
    curl -sSf -L "$anki_release" | tar x --zstd --directory="$sandbox" --file=- >&3
    cd "$sandbox/anki-${anki_stable}-linux-qt5" || exit
    PREFIX="$HOME/.local" ./install.sh >&3
    echo -e "\r\e[32m✅ anki is up-to-date ($anki_installed » $anki_stable)\e[0m"
  else
    echo -e "\r✅ anki is up-to-date ($anki_installed)"
  fi
fi

# mozlz4 -----------------------------------------------------------------------
if [ $# -eq 0 ] || [ "$1" == mozlz4 ] && command -v mozlz4 >/dev/null 2>&1; then
  printf "Checking mozlz4..."

  mozlz4_stable=$(latest_version "jusw85/mozlz4")
  mozlz4_installed=$(mozlz4 --version | awk '{ print $2 }')

  if version_gt "$mozlz4_stable" "$mozlz4_installed"; then
    printf "\r⬇️ Upgrading mozlz4..."

    chmod 777 "$sandbox"

    git clone https://github.com/jusw85/mozlz4 "$sandbox/mozlz4" 2>&3
    cd "$sandbox/mozlz4" || exit
    git checkout "v${mozlz4_stable}"
    cargo build --release >&3
    mv "$sandbox/mozlz4/target/release/mozlz4" "$HOME/.local/bin" >&3
    echo -e "\r\e[32m✅ mozlz4 is up-to-date ($mozlz4_installed » $mozlz4_stable)\e[0m"
  else
    echo -e "\r✅ mozlz4 is up-to-date ($mozlz4_installed)"
  fi
fi
