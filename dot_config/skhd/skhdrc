# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# Windows ======================================================================
# Focus ------------------------------------------------------------------------
# H and L ignore display boundaries
# (adapted from https://github.com/koekeishiya/yabai/issues/104#issuecomment-511237696)
alt - h : yabai -m window --focus west || \
  yabai -m window --focus "$(yabai -m query --spaces --display next | jq -e '.[] | select(."is-visible" == true)."first-window"')"
alt - j : yabai -m window --focus stack.prev || yabai -m window --focus south
alt - k : yabai -m window --focus stack.next || yabai -m window --focus north
alt - l : yabai -m window --focus east || \
  yabai -m window --focus "$(yabai -m query --spaces --display prev | jq -e '.[] | select(."is-visible" == true)."last-window"')"

# Stack ------------------------------------------------------------------------
alt - s : yabai -m window --stack sibling

# Move -------------------------------------------------------------------------
# H and L ignore display boundaries
# (adapted from https://github.com/koekeishiya/yabai/issues/104#issuecomment-511237696)
shift + alt - h : yabai -m window --swap west || \
  ( \
    this_window="$(yabai -m query --windows --window | jq .id)"; \
    yabai -m window --warp "$(yabai -m query --spaces --display next | jq -e '.[] | select(."is-visible" == true)."first-window"')" || \
    yabai -m window --space "$(yabai -m query --spaces --display next | jq -e '.[] | select(."is-visible" == true).id')"; \
    yabai -m window --focus $this_window \
  )
shift + alt - j : yabai -m window --swap stack.prev || yabai -m window --swap south
shift + alt - k : yabai -m window --swap stack.next || yabai -m window --swap north
shift + alt - l : yabai -m window --swap east || \
  ( \
    this_window="$(yabai -m query --windows --window | jq .id)"; \
    yabai -m window --warp "$(yabai -m query --spaces --display prev | jq -e '.[] | select(."is-visible" == true)."last-window"')" || \
    yabai -m window --space "$(yabai -m query --spaces --display prev | jq -e '.[] | select(."is-visible" == true).id')"; \
    yabai -m window --focus $this_window \
  )

# balance size of windows
# shift + alt - 0 : yabai -m space --balance

# make floating window fill screen
# shift + alt - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + alt - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop, move window and follow focus - uses jq for parsing json (brew install jq)
# shift + cmd - n : yabai -m space --create && \
#                   index="$(yabai -m query --spaces --display | jq 'map(select(."is-native-fullscreen" == false))[-1].index')" && \
#                   yabai -m window --space "${index}" && \
#                   yabai -m space --focus "${index}"

# Spaces =======================================================================
# Focus ------------------------------------------------------------------------
# cycle through non-empty spaces
alt - tab : ( \
        this_display="$(yabai -m query --displays --display | jq .id)"; \
        this_space="$(yabai -m query --spaces --space | jq .id)"; \
        yabai -m space --focus "$(yabai -m query --spaces --display $this_display | jq -e "first(.[] | select((.windows | length != 0) and (.id > $this_space))).index")" \
        || yabai -m space --focus "$(yabai -m query --spaces --display $this_display | jq -e 'first(.[] | select(.windows | length != 0).index)')" \
    )
alt + shift - tab : ( \
        this_display="$(yabai -m query --displays --display | jq .id)"; \
        this_space="$(yabai -m query --spaces --space | jq .id)"; \
        yabai -m space --focus "$(yabai -m query --spaces --display $this_display | jq -e "last(.[] | select((.windows | length != 0) and (.id < $this_space))).index")" \
        || yabai -m space --focus "$(yabai -m query --spaces --display $this_display | jq -e 'last(.[] | select(.windows | length != 0).index)')" \
    )

# switch to other display
# alt - 0x32 : yabai -m display --focus recent

# TODO: switch to most recent space on current monitor
# adapted from https://github.com/koekeishiya/yabai/issues/1336
alt - 0x32 : yabai -m space --focus recent

alt - 1 : yabai -m space --focus 6
alt - 2 : yabai -m space --focus 7
alt - 3 : yabai -m space --focus 8
alt - 4 : yabai -m space --focus 9
alt - 5 : yabai -m space --focus 10
alt - 6 : yabai -m space --focus 5
alt - 7 : yabai -m space --focus 4
alt - 8 : yabai -m space --focus 3
alt - 9 : yabai -m space --focus 2
alt - 0 : yabai -m space --focus 1

# Send Windows -----------------------------------------------------------------
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
shift + alt - 1 : yabai -m window --space  6
shift + alt - 2 : yabai -m window --space  7
shift + alt - 3 : yabai -m window --space  8
shift + alt - 4 : yabai -m window --space  9
shift + alt - 5 : yabai -m window --space  10
shift + alt - 6 : yabai -m window --space  5
shift + alt - 7 : yabai -m window --space  4
shift + alt - 8 : yabai -m window --space  3
shift + alt - 9 : yabai -m window --space  2
shift + alt - 0 : yabai -m window --space  1

# focus monitor
# ctrl + alt - z  : yabai -m display --focus prev
# ctrl + alt - 3  : yabai -m display --focus 3

# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
# alt - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
# alt - e : yabai -m window --toggle split

# float / unfloat window and center on screen
alt - f : yabai -m window --toggle float --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
# alt - p : yabai -m window --toggle sticky --toggle topmost --toggle pip
